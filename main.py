import given
import re
import sys

# Cipher Text 1


# Cipher Text 2


# Both C1 & C2 were encrypted with the same key using a one-time pad.

# plaintext1 & plaintext2 have part of the decrypted ciphers.
plaintext1 = "I visualize a time when we will be to robots what dogs are to humans, and I'm rooting for the machines."
plaintext2 = "Anyone who considers arithmetical methods of producing random digits is, of course, in a state of sin."

# Given to lists of bits, return their XOR
def xor_two_lists(first, second):
	result = []
	for i in range(0, len(first)):
		if(first[i] + second[i] == 1):
			result.append(1)
		else:
			result.append(0)
	return result

# Check if text contains only alphanumerics and punctuation and spaces
def regex_english(text):
	return re.match('^[\w.,!;\'" ]+$', text) is not None

def main():

	# Get the users plaintext guess from command prompt
	guess = sys.argv[1]
	guessBits = given.string_to_bits(guess) # convert to bit list

	# Convert C1 & C2 to bit list (i.e [1, 0, 1, 0, 0])
	c1_list = map(int, list(C1))
	c2_list = map(int, list(C2))

	# Total compares needed since we will make ASCII byte-wise comparisons
	totalCompares = (len(C1)/7) - (len(guessBits)/7)

	# Check for guess match in cipher text, shifting by 1 byte for each iteration
	for x in range(0,totalCompares):
		# shift beginning & end index by 1 ASCII byte each iteration
		beg = 0 + (x * 7)
		end = len(guessBits) + (x * 7)

		# Find a possibleKey by XOR guess with subsection of C1
		possibleKey = xor_two_lists(guessBits, c1_list[beg:end])

		# Decrypt same subsection of C2 with possible key
		possibleMessage = xor_two_lists(possibleKey, c2_list[beg:end])
		decryptedMessage = given.bits_to_string(possibleMessage)

		# Print if decryptedMessage potentially part of an english sentence
		if(regex_english(decryptedMessage)):
			print decryptedMessage + " beg: " + str(beg/7) + " end: " + str(end/7)


if __name__ == "__main__":
    main()

